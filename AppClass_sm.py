# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AppClass.sm

import statemap


class AnalyzerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def EOS(self, fsm):
        self.Default(fsm)

    def X(self, fsm):
        self.Default(fsm)

    def hyphen(self, fsm):
        self.Default(fsm)

    def space(self, fsm):
        self.Default(fsm)

    def unknown(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map1_Default(AnalyzerState):

    def unknown(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.error)
        fsm.getState().Entry(fsm)

    def hyphen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.error)
        fsm.getState().Entry(fsm)

    def space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.error)
        fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.acceptable()
        finally:
            fsm.setState(Map1.error)
            fsm.getState().Entry(fsm)

class Map1_start(Map1_Default):

    def X(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.save_name()
        finally:
            fsm.setState(Map1.command_name)
            fsm.getState().Entry(fsm)

class Map1_command_name(Map1_Default):

    def X(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.save_name()
        finally:
            fsm.setState(endState)

    def space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.next)
        fsm.getState().Entry(fsm)

class Map1_next(Map1_Default):

    def X(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.atribute)
        fsm.getState().Entry(fsm)

    def hyphen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.is_option)
        fsm.getState().Entry(fsm)

    def space(self, fsm):
        # No actions.
        pass

class Map1_is_option(Map1_Default):

    def X(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.option)
        fsm.getState().Entry(fsm)

class Map1_option(Map1_Default):

    def X(self, fsm):
        # No actions.
        pass

    def space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.next)
        fsm.getState().Entry(fsm)

class Map1_atribute(Map1_Default):

    def X(self, fsm):
        # No actions.
        pass

    def space(self, fsm):
        # No actions.
        pass

class Map1_end(Map1_Default):
    pass

class Map1_error(Map1_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.unacceptable()
        finally:
            fsm.setState(endState)

    def X(self, fsm):
        # No actions.
        pass

class Map1(object):

    start = Map1_start('Map1.start', 0)
    command_name = Map1_command_name('Map1.command_name', 1)
    next = Map1_next('Map1.next', 2)
    is_option = Map1_is_option('Map1.is_option', 3)
    option = Map1_option('Map1.option', 4)
    atribute = Map1_atribute('Map1.atribute', 5)
    end = Map1_end('Map1.end', 6)
    error = Map1_error('Map1.error', 7)
    Default = Map1_Default('Map1.Default', -1)

class Analyzer_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map1.start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
